apply from: "${rootDir}/libraries.gradle"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.9.0"
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath "com.github.ben-manes:gradle-versions-plugin:0.27.0"
    }
}

allprojects {
    group = 'io.sirix'
    version = '0.9.4-SNAPSHOT'

    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'net.researchgate.release'
    apply plugin: 'com.github.ben-manes.versions'

    java {
        sourceCompatibility = JavaVersion.VERSION_13
        targetCompatibility = JavaVersion.VERSION_13
    }

    release {
        failOnSnapshotDependencies = false
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    configurations.all {
    }

    task testsJar(type: Jar) {
        archiveClassifier = 'tests'
        from(sourceSets.test.output)
    }

    artifacts {
        archives testsJar
    }

    jar {
        into("META-INF/maven/io.sirix/$project.name") {
            from { generatePomFileForMavenPublication }
            rename ".*", "pom.xml"
        }
    }

    publishing.publications.maven.artifact(testsJar)

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useTestNG()
        useJUnit()
        //To run Kotlin Juint once it is fixed
        //useJUnitPlatform()
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom files(subprojects.jacocoTestReport.executionData).filter {
        file -> file.exists()
    }.asList()
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
