// https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_source_sets
//sourceSets {
//    jmh {
//        java.srcDirs = ['src/jmh/java']
//        resources.srcDirs = ['src/jmh/resources']
//        compileClasspath += sourceSets.main.runtimeClasspath
//    }
//}

dependencies {
    implementation project(':sirix-core')
    implementation project(':sirix-xquery')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.named('test') {
    useJUnitPlatform()
}

jmh {
    warmupIterations = 2
    iterations = 5
    fork = 1
    jvmArgs = ['--enable-preview',
               '-Xms2g',
               '-Xmx7g',
               '--add-modules=jdk.incubator.foreign',
               '--add-exports=java.base/jdk.internal.ref=ALL-UNNAMED',
               '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED',
               '--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED',
               '--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
               '--add-exports=java.base/java.lang.reflect=ALL-UNNAMED',
               '--add-opens=jdk.compiler/com.sun.tools.javac=ALL-UNNAMED',
               '--add-opens=java.base/java.lang=ALL-UNNAMED',
               '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
               '--add-opens=java.base/java.io=ALL-UNNAMED',
               '--add-opens=java.base/java.util=ALL-UNNAMED',
               '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
               '-Djmh.ignoreLock=true']
    includes = ['.*XMarkBench.*']
}

dependencies {
    implementation project(':sirix-core')
    implementation project(':sirix-xquery')

//    jmhImplementation 'org.openjdk.jmh:jmh-core:1.35'
//    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.35'
}

//tasks.withType(JavaExec).configureEach {
//    jvmArgs '--enable-preview'
//    jvmArgs '-Xms2g'
//    jvmArgs '-Xmx7g'
//    jvmArgs '--add-modules=jdk.incubator.foreign'
//    jvmArgs '--add-exports=java.base/jdk.internal.ref=ALL-UNNAMED'
//    jvmArgs '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
//    jvmArgs '--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED'
//    jvmArgs '--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED'
//    jvmArgs '--add-exports=java.base/java.lang.reflect=ALL-UNNAMED'
//    jvmArgs '--add-opens=jdk.compiler/com.sun.tools.javac=ALL-UNNAMED'
//    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
//    jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
//    jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
//    jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
//    jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
//}
//
//// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html
//task jmh(type: JavaExec, dependsOn: jmhClasses) {
//    main = 'org.openjdk.jmh.Main'
//    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
//
//    // To enable the built-in stacktrace sampling profiler
//    // args = ['-prof', 'stack']
//}
//
//// to make sure benchmarks always get compiled
//classes.finalizedBy(jmhClasses)

description = 'Sirix benchmarks.'